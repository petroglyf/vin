# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Ubuntu Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-24.04]
        build_type: [release]
        c_compiler: [gcc, cl, aarch64-linux-gnu-gcc]
        include:
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
            is_arm: false
          # - os: ubuntu-latest
          #   c_compiler: aarch64-linux-gnu-gcc
          #   cpp_compiler: aarch64-linux-gnu-g++
          #   is_arm: true
        exclude:
          - os: ubuntu-24.04
            c_compiler: aarch64-linux-gnu-gcc
          - os: ubuntu-24.04
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "build-output-install-dir=${{ github.workspace }}/build/install" >> "$GITHUB_OUTPUT"

    - name: Add the Petroglyph PPA
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: petroglyph-ppa
      shell: bash
      run: |
        curl -s --compressed "https://raw.githubusercontent.com/petroglyf/ppa/refs/heads/master/KEY.gpg" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/ppa.gpg >/dev/null
        sudo curl -s --compressed -o /etc/apt/sources.list.d/pg-packages.list "https://raw.githubusercontent.com/petroglyf/ppa/refs/heads/master/packages.list"
    - name: Add Apache Arrow PPA
      # Adds apache arrow to the aptitude repos
      id: arrow-ppa
      shell: bash
      run: |
        sudo apt install -y -V ca-certificates lsb-release wget
        wget https://repo1.maven.org/maven2/org/apache/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
        sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
    - name: Install dependencies if ARM64
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: deps-arm
      shell: bash
      run: |
        ! ${{ matrix.is_arm }} && echo "Is x86, skipping" && exit;

        sudo echo "# ARM64 support" >> source-mod.list
        sudo echo "Types: deb" >> source-mod.list
        sudo echo "URIs: http://ports.ubuntu.com/ubuntu-ports/" >> source-mod.list
        sudo echo "Suites: noble noble-updates noble-backports" >> source-mod.list
        sudo echo "Components: main universe restricted multiverse" >> source-mod.list
        sudo echo "Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg" >> source-mod.list
        sudo echo "Architectures: arm64" >> source-mod.list
        sudo echo "" >> source-mod.list
        sudo cat source-mod.list
        sudo mv source-mod.list /etc/apt/sources.list.d/arm-cross-compile.sources

        sudo dpkg --add-architecture arm64
        sudo apt update
        sudo apt-get install -y pkg-config catch2 qt6-multimedia-dev:arm64 qt6-base-dev:arm64 functional-dag:arm64=1.0rc1 libgl1-mesa-dev:arm64 libflatbuffers-dev:arm64 libarrow-dev:arm64
        sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu g++-aarch64-linux-gnu meson
    - name: Install dependencies if x86-64
      run: |
        ${{ matrix.is_arm }} && echo "Is ARM, skipping" && exit; 
        sudo apt update
        sudo apt-get install -y pkg-config catch2 qt6-multimedia-dev qt6-base-dev libgl1-mesa-dev meson libflatbuffers-dev libarrow-dev
        sudo apt-get install -y functional-dag=1.0rc1
    - name: Configure Meson
      # Configure Meson in a 'build' subdirectory. 
      run: |
        export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
        ${{ matrix.is_arm }} && meson --buildtype=${{ matrix.build_type }} ${{ steps.strings.outputs.build-output-dir }} ${{ github.workspace }} -DARCH_ID='arm64';
        ! ${{ matrix.is_arm }} && meson --buildtype=${{ matrix.build_type }} ${{ steps.strings.outputs.build-output-dir }} ${{ github.workspace }} -DARCH_ID='amd64';
        echo "Completed Configuration"

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: meson compile -C ${{ steps.strings.outputs.build-output-dir }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: meson test -C ${{ steps.strings.outputs.build-output-dir }}


    - name: Package result 
      id: pack
      shell: bash
      run: |
        meson install -C ${{ steps.strings.outputs.build-output-dir }} --destdir ${{ steps.strings.outputs.build-output-install-dir }};
        meson compile -C ${{ steps.strings.outputs.build-output-dir }} debpackage
        echo "Complete"

    - uses: actions/upload-artifact@v4
      with:
        # Name of the artifact to upload.
        # Optional. Default is 'artifact'
        name: Store artifacts 
        id: artifact
    
        # A file, directory or wildcard pattern that describes what to upload
        # Required.
        path: 'build/*.deb'
    
        # The desired behavior if no files are found using the provided path.
        # Available Options:
        #   warn: Output a warning but do not fail the action
        #   error: Fail the action with an error message
        #   ignore: Do not output any warnings or errors, the action does not fail
        # Optional. Default is 'warn'
        if-no-files-found: warn
    
    
        # If true, an artifact with a matching name will be deleted before a new one is uploaded.
        # If false, the action will fail if an artifact for the given name already exists.
        # Does not fail if the artifact does not exist.
        # Optional. Default is 'false'
        overwrite: true
